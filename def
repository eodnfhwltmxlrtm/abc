#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

#define MOD 1000000007

int dp[101][10001];
// dp[i][j]: i명의 친구에게 j개의 사탕을 나누어주었을 경우의 수(0<=i<=m, 0<=i<=n)
int prefix[10001]; // prefix[j]: 사탕을 최대 j개 나누어주는 모든 경우의 수(누적합)

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int t;
    cin >> t;
    while (t--)
    {
        fill(&dp[0][0], &dp[100][10001], 0);
        fill(&prefix[0], &prefix[10001], 0);

        int n, m, k; // n: 사탕의 수, m: 친구의 수, k: 최대 사탕의 수
        cin >> n >> m >> k;

        dp[0][0] = 1; // 0명의 친구에게 사탕 0개를 나누어주는 경우
        for (int i = 1; i <= n; i++)
        {
            dp[0][i] = 0;
        }

        for (int i = 1; i <= m; i++)
        { // 나누어줄 친구의 수
            for (int j = 0; j <= n; j++)
            { // 나누어주는 사탕의 수
                if (j == 0)
                {
                    prefix[j] = dp[i - 1][j] % MOD;
                }
                else
                {
                    prefix[j] = (prefix[j - 1] + dp[i - 1][j]) % MOD; // dp[i-1][j] 누적합 갱신
                }

                if (j > k)
                {
                    dp[i][j] = (prefix[j] - prefix[j - k - 1] + MOD) % MOD;
                    // i-1명에게 최대 j개까지 사탕을 나누어준 경우의 수 - i-1명에게 최대 j-(k+1)명까지 사탕을 나누어준 경우의 수
                }
                else
                {
                    dp[i][j] = prefix[j];
                }
            }
        }

        // 나누어 받는 사탕의 개수 x, x<=k이고 xm<=n인 경우 최댓값이 예외
        int exception = 0;
        for (int i = 1; i <= k; i++)
        {
            if (i * m <= n)
                exception++;
        }

        int ans = 0;
        for (int i = 0; i <= n; i++)
        { // m명의 친구에게 사탕을 나누어줬을 때 모든 경우의 수
            ans = (ans + dp[m][i]) % MOD;
        }
        ans = (ans - exception - 1 + MOD) % MOD;
        cout << ans << '\n';
    }
}
